// Generated by CoffeeScript 1.6.3
var HippieTabs,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$.fn.hippieTabs = function() {
  return new HippieTabs(this);
};

HippieTabs = (function() {
  function HippieTabs(element) {
    this.element = element;
    this.move = __bind(this.move, this);
    this.moveTouch = __bind(this.moveTouch, this);
    this.removeTab = __bind(this.removeTab, this);
    this.removeTabById = __bind(this.removeTabById, this);
    this.activateTab = __bind(this.activateTab, this);
    this.activateTabById = __bind(this.activateTabById, this);
    this.bindTouch = __bind(this.bindTouch, this);
    this.createTab = __bind(this.createTab, this);
    this.moveMouse = __bind(this.moveMouse, this);
    this.endTouch = __bind(this.endTouch, this);
    this.stopDrag = __bind(this.stopDrag, this);
    this.startTouch = __bind(this.startTouch, this);
    this.startMouse = __bind(this.startMouse, this);
    this.onClickClose = __bind(this.onClickClose, this);
    this.on = __bind(this.on, this);
    this.element.on('mousedown', 'li', this.startMouse);
    this.element.on('click', 'span.htab-close', this.onClickClose);
    this.element.on('mousedown', 'span.htab-close', function(event) {
      return event.stopPropagation();
    });
    $(document).on('mouseleave', this.stopDrag);
    $(document).on('mousemove', this.moveMouse);
    this.element.on('touchend', this.endTouch);
    this.element.on('touchcancel', this.endTouch);
    this.element.on('touchleave', this.endTouch);
    this.element.on('touchmove', this.moveTouch);
    this.element.on('touchstart', this.startTouch);
    this.dragging = false;
    this.drag15px = false;
    this.initTabLeft = 0;
    this.initMouseX = 0;
    this.tabWidth = this.element.find('li').width();
    console.log(this.element);
  }

  HippieTabs.prototype.on = function(eventType, fn) {
    return this.element.on(eventType, fn);
  };

  HippieTabs.prototype.onClickClose = function(event) {
    var rem;
    rem = $(event.target).parent().parent();
    return this.removeTab(rem);
  };

  HippieTabs.prototype.startMouse = function(event) {
    var id;
    this.initMouseX = event.clientX;
    id = $(event.target).parent().attr('htid');
    if (event.button === 0) {
      this.activateTabById(id);
    }
    if (event.button === 1) {
      this.closeTabById(id);
      event.preventDefault();
    }
    return this.dragging = true;
  };

  HippieTabs.prototype.startTouch = function(event) {
    event.preventDefault();
    event.stopPropagation();
    this.initMouseX = event.originalEvent.changedTouches[0].pageX;
    console.log(event.originalEvent.changedTouches[0].pageX);
    return this.dragging = true;
  };

  HippieTabs.prototype.stopDrag = function(event) {
    if (this.drag15px) {
      this.element.find('.htab-active:first').animate({
        'left': '0'
      });
    }
    this.dragging = false;
    return this.drag15px = false;
  };

  HippieTabs.prototype.endTouch = function(event) {
    if (this.dragging) {
      this.element.find('.htab-active:first').animate({
        'left': '0'
      });
    }
    return this.dragging = false;
  };

  HippieTabs.prototype.moveMouse = function(event) {
    var whichM;
    if (!this.dragging) {
      return;
    }
    whichM = typeof event.buttons !== 'undefined' ? event.buttons : event.which;
    if (whichM !== 1) {
      return this.stopDrag();
    }
    event.preventDefault();
    return this.move(event.clientX);
  };

  HippieTabs.prototype.createTab = function(title, id, data) {
    var tab;
    if (data == null) {
      data = '';
    }
    tab = "<li htid=\"" + id + "\" htdata=\"" + data + "\"><span>" + title + "<span class=\"htab-close\"></span></span></li>";
    this.element.append(tab);
    tab = this.element.find('li:last');
    this.tabWidth = tab.width();
    this.element.trigger('htabcreate', [id, data, title]);
    this.bindTouch(tab);
    return this.activateTabById(id);
  };

  HippieTabs.prototype.bindTouch = function(tabElem) {
    var _this = this;
    tabElem.find("span.htab-close").bind("touchstart", function(event) {
      _this.closeTabById(id);
      return event.stopPropagation();
    });
    return tabElem.bind("touchstart", function(event) {
      return editor.activate_tab(id);
    });
  };

  HippieTabs.prototype.activateTabById = function(id, trigger) {
    var act;
    if (trigger == null) {
      trigger = true;
    }
    act = this.element.find("[htid=" + id + "]");
    return this.activateTab(act, trigger);
  };

  HippieTabs.prototype.activateTab = function(act, trigger) {
    if (trigger == null) {
      trigger = true;
    }
    this.element.find('.htab-active').removeClass('htab-active');
    act.addClass('htab-active');
    return this.element.trigger('htabactivate', [act.attr('htid'), act.attr('htdata')]);
  };

  HippieTabs.prototype.removeTabById = function(id, trigger) {
    var rem;
    if (trigger == null) {
      trigger = true;
    }
    rem = this.element.find("[htid=" + id + "]");
    return this.removeTab(rem, trigger);
  };

  HippieTabs.prototype.removeTab = function(rem, trigger) {
    var activateNewTab,
      _this = this;
    if (trigger == null) {
      trigger = true;
    }
    activateNewTab = rem.hasClass('htab-active');
    if (trigger) {
      this.element.trigger('htabclose', [rem.attr('htid'), rem.attr('htdata')]);
    }
    return rem.animate({
      'width': '0'
    }, function() {
      rem.remove();
      if (activateNewTab) {
        return _this.activateTab(_this.element.find('li:first'));
      }
    });
  };

  HippieTabs.prototype.moveTouch = function(event) {
    this.dragging = true;
    event.preventDefault();
    event.stopPropagation();
    return this.move(event.originalEvent.changedTouches[0].pageX);
  };

  HippieTabs.prototype.move = function(Xpos) {
    var active_tab, atEnd, ind, offset, rel_position, tabh, tabheaders, _i, _len;
    offset = Xpos - this.initMouseX;
    if (this.drag15px !== true && Math.abs(offset) < 16) {
      return;
    }
    this.drag15px = true;
    tabheaders = this.element.find('li');
    active_tab = this.element.find('.htab-active');
    ind = -1;
    for (_i = 0, _len = tabheaders.length; _i < _len; _i++) {
      tabh = tabheaders[_i];
      if ($(tabh).is(active_tab)) {
        ind = _i;
      }
    }
    atEnd = ind === tabheaders.length - 1;
    if (offset < 0 && ind === 0) {
      offset = 0;
    }
    rel_position = Math.round(offset / this.tabWidth);
    if (atEnd && rel_position > 0) {
      rel_position = 0;
    }
    if (rel_position !== 0) {
      if (rel_position > 0) {
        this.element.find('.htab-active').insertAfter(tabheaders[ind + rel_position]);
      }
      if (rel_position < 0) {
        this.element.find('.htab-active').insertBefore(tabheaders[ind + rel_position]);
      }
      if (ind + rel_position >= 0 || ind + rel_position <= tabheaders.length) {
        this.initMouseX += this.tabWidth * rel_position;
      }
    }
    if (offset !== 0) {
      offset = Xpos - this.initMouseX;
    }
    this.element.find('.htab-active:first').stop();
    return this.element.find('.htab-active:first').css({
      'left': offset + 'px'
    });
  };

  return HippieTabs;

})();
