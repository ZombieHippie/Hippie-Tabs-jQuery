// Generated by CoffeeScript 1.6.3
var HippieTabs,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$.fn.hippieTabs = function() {
  return new HippieTabs(this);
};

HippieTabs = (function() {
  function HippieTabs(iden) {
    this.iden = iden;
    this.move = __bind(this.move, this);
    this.moveTouch = __bind(this.moveTouch, this);
    this.closeTab = __bind(this.closeTab, this);
    this.moveMouse = __bind(this.moveMouse, this);
    this.endTouch = __bind(this.endTouch, this);
    this.stopDrag = __bind(this.stopDrag, this);
    this.startTouch = __bind(this.startTouch, this);
    this.startMouse = __bind(this.startMouse, this);
    this.iden.on('mousedown', 'li', this.startMouse);
    this.iden.on('click', 'span.htab-close', this.closeTab);
    this.iden.on('mousedown', 'span.htab-close', function(event) {
      return event.stopPropagation();
    });
    $(document).on('mouseleave', this.stopDrag);
    $(document).on('mousemove', this.moveMouse);
    this.dragging = false;
    this.drag15px = false;
    this.initTabLeft = 0;
    this.initMouseX = 0;
    this.tabWidth = this.iden.find('li').width();
    console.log(this.iden);
  }

  HippieTabs.prototype.startMouse = function(event) {
    this.initMouseX = event.clientX;
    $('.htab-active').removeClass('htab-active');
    $(event.target).parent().addClass('htab-active');
    return this.dragging = true;
  };

  HippieTabs.prototype.startTouch = function(event) {
    event.preventDefault();
    event.stopPropagation();
    this.initMouseX = event.originalEvent.changedTouches[0].pageX;
    console.log(event.originalEvent.changedTouches[0].pageX);
    return this.dragging = true;
  };

  HippieTabs.prototype.stopDrag = function(event) {
    if (this.drag15px) {
      this.iden.find('.htab-active:first').animate({
        'left': '0'
      });
    }
    this.dragging = false;
    return this.drag15px = false;
  };

  HippieTabs.prototype.endTouch = function(event) {
    if (this.dragging) {
      this.iden.find('.htab-active:first').animate({
        'left': '0'
      });
    }
    return this.dragging = false;
  };

  HippieTabs.prototype.moveMouse = function(event) {
    var whichM;
    if (!this.dragging) {
      return;
    }
    whichM = typeof event.buttons !== 'undefined' ? event.buttons : event.which;
    if (whichM !== 1) {
      return this.stopDrag();
    }
    event.preventDefault();
    return this.move(event.clientX);
  };

  HippieTabs.prototype.closeTab = function(event) {
    var rem;
    rem = $(event.target).parent().parent();
    return rem.animate({
      'width': '0'
    }, function() {
      return rem.remove();
    });
  };

  HippieTabs.prototype.moveTouch = function(event) {
    this.dragging = true;
    event.preventDefault();
    event.stopPropagation();
    return this.move(event.originalEvent.changedTouches[0].pageX);
  };

  HippieTabs.prototype.move = function(Xpos) {
    var active_tab, atEnd, ind, offset, rel_position, tabh, tabheaders, _i, _len;
    offset = Xpos - this.initMouseX;
    if (this.drag15px !== true && Math.abs(offset) < 16) {
      return;
    }
    this.drag15px = true;
    tabheaders = this.iden.find('li');
    active_tab = this.iden.find('.htab-active');
    ind = -1;
    for (_i = 0, _len = tabheaders.length; _i < _len; _i++) {
      tabh = tabheaders[_i];
      if ($(tabh).is(active_tab)) {
        ind = _i;
      }
    }
    atEnd = ind === tabheaders.length - 1;
    if (offset < 0 && ind === 0) {
      offset = 0;
    }
    rel_position = Math.round(offset / this.tabWidth);
    if (atEnd && rel_position > 0) {
      rel_position = 0;
    }
    if (rel_position !== 0) {
      if (rel_position > 0) {
        this.iden.find('.htab-active').insertAfter(tabheaders[ind + rel_position]);
      }
      if (rel_position < 0) {
        this.iden.find('.htab-active').insertBefore(tabheaders[ind + rel_position]);
      }
      if (ind + rel_position >= 0 || ind + rel_position <= tabheaders.length) {
        this.initMouseX += this.tabWidth * rel_position;
      }
    }
    if (offset !== 0) {
      offset = Xpos - this.initMouseX;
    }
    this.iden.find('.htab-active:first').stop();
    return this.iden.find('.htab-active:first').css({
      'left': offset + 'px'
    });
  };

  return HippieTabs;

})();
